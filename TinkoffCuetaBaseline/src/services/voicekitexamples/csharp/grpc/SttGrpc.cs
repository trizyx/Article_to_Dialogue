// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tinkoff/cloud/stt/v1/stt.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tinkoff.Cloud.Stt.V1 {
  public static partial class SpeechToText
  {
    static readonly string __ServiceName = "tinkoff.cloud.stt.v1.SpeechToText";

    static readonly grpc::Marshaller<global::Tinkoff.Cloud.Stt.V1.RecognizeRequest> __Marshaller_tinkoff_cloud_stt_v1_RecognizeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tinkoff.Cloud.Stt.V1.RecognizeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tinkoff.Cloud.Stt.V1.RecognizeResponse> __Marshaller_tinkoff_cloud_stt_v1_RecognizeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tinkoff.Cloud.Stt.V1.RecognizeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeRequest> __Marshaller_tinkoff_cloud_stt_v1_StreamingRecognizeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeResponse> __Marshaller_tinkoff_cloud_stt_v1_StreamingRecognizeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Tinkoff.Cloud.Stt.V1.RecognizeRequest, global::Tinkoff.Cloud.Stt.V1.RecognizeResponse> __Method_Recognize = new grpc::Method<global::Tinkoff.Cloud.Stt.V1.RecognizeRequest, global::Tinkoff.Cloud.Stt.V1.RecognizeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Recognize",
        __Marshaller_tinkoff_cloud_stt_v1_RecognizeRequest,
        __Marshaller_tinkoff_cloud_stt_v1_RecognizeResponse);

    static readonly grpc::Method<global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeRequest, global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeResponse> __Method_StreamingRecognize = new grpc::Method<global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeRequest, global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamingRecognize",
        __Marshaller_tinkoff_cloud_stt_v1_StreamingRecognizeRequest,
        __Marshaller_tinkoff_cloud_stt_v1_StreamingRecognizeResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tinkoff.Cloud.Stt.V1.SttReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SpeechToText</summary>
    [grpc::BindServiceMethod(typeof(SpeechToText), "BindService")]
    public abstract partial class SpeechToTextBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Tinkoff.Cloud.Stt.V1.RecognizeResponse> Recognize(global::Tinkoff.Cloud.Stt.V1.RecognizeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task StreamingRecognize(grpc::IAsyncStreamReader<global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeRequest> requestStream, grpc::IServerStreamWriter<global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SpeechToText</summary>
    public partial class SpeechToTextClient : grpc::ClientBase<SpeechToTextClient>
    {
      /// <summary>Creates a new client for SpeechToText</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SpeechToTextClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SpeechToText that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SpeechToTextClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SpeechToTextClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SpeechToTextClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Tinkoff.Cloud.Stt.V1.RecognizeResponse Recognize(global::Tinkoff.Cloud.Stt.V1.RecognizeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Recognize(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tinkoff.Cloud.Stt.V1.RecognizeResponse Recognize(global::Tinkoff.Cloud.Stt.V1.RecognizeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Recognize, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.Cloud.Stt.V1.RecognizeResponse> RecognizeAsync(global::Tinkoff.Cloud.Stt.V1.RecognizeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecognizeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tinkoff.Cloud.Stt.V1.RecognizeResponse> RecognizeAsync(global::Tinkoff.Cloud.Stt.V1.RecognizeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Recognize, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeRequest, global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeResponse> StreamingRecognize(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamingRecognize(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeRequest, global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeResponse> StreamingRecognize(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamingRecognize, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SpeechToTextClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SpeechToTextClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SpeechToTextBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Recognize, serviceImpl.Recognize)
          .AddMethod(__Method_StreamingRecognize, serviceImpl.StreamingRecognize).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SpeechToTextBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Recognize, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tinkoff.Cloud.Stt.V1.RecognizeRequest, global::Tinkoff.Cloud.Stt.V1.RecognizeResponse>(serviceImpl.Recognize));
      serviceBinder.AddMethod(__Method_StreamingRecognize, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeRequest, global::Tinkoff.Cloud.Stt.V1.StreamingRecognizeResponse>(serviceImpl.StreamingRecognize));
    }

  }
}
#endregion
