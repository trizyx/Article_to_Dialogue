import os
import sqlite3
import tempfile

import streamlit as st
import validators
from newspaper.article import ArticleException

from gpt_api import create_dialog_gtp04mini, create_ssml_gpt04mini, dialog_promt, ssml_promt, check_article, check_promt
from llama import create_dialog_llama
from parser import pdf_to_txt, url_to_txt
from voice_api import voice_synth

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
conn = sqlite3.connect('dialog_history.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS history 
             (id INTEGER PRIMARY KEY, source TEXT, dialog TEXT, audio_path TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
conn.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
def save_to_history(source, dialog, audio_path):
    c.execute("INSERT INTO history (source, dialog, audio_path) VALUES (?, ?, ?)", (source, dialog, audio_path))
    conn.commit()


api_choice = st.sidebar.select_slider(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞:",
    options=["ChatGPT API", "LLaMA Local"]
)

# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
st.title("üë®‚Äçüëß –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å —Å–∏–Ω—Ç–µ–∑–æ–º —Ä–µ—á–∏")
st.write(
    "–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏ –æ–±–∑–æ—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –≤ "
    "–¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ–∂–¥—É –æ—Ç—Ü–æ–º –∏ –¥–æ—á–µ—Ä—å—é. –¢–µ–∫—Å—Ç—ã —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥, "
    "–∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –æ–∑–≤—É—á–∏–≤–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø–æ–¥—Ä–æ—Å—Ç–∫–∏ –º–æ–≥–ª–∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã. "
    "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, PDF, –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å URL-–∞–¥—Ä–µ—Å —Å—Ç–∞—Ç—å–∏."
)

# –°–µ–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ URL
file = st.file_uploader("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.txt –∏–ª–∏ .pdf)", type=["txt", "pdf"])
url = st.text_input("üåê –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL —Å—Ç–∞—Ç—å–∏")

# –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
col1, col2 = st.columns(2)

# –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞
with col1:
    generate_button = st.button("–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
with col2:
    history_button = st.button("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤")

# –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –∞—É–¥–∏–æ
if generate_button:
    if not file and not url:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    if file or url:
        st.info("‚è≥ –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞...")

        with tempfile.TemporaryDirectory() as temp_dir:
            text_path = None

            # –≠—Ç–∞–ø 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ URL
            if file:
                if file.type == "application/pdf":
                    pdf_path = os.path.join(temp_dir, file.name)
                    with open(pdf_path, "wb") as f:
                        f.write(file.read())
                    text_path = os.path.join(temp_dir, "uploaded_text.txt")
                    pdf_to_txt(pdf_path, text_path)
                elif file.type == "text/plain":
                    text_path = os.path.join(temp_dir, file.name)
                    with open(text_path, "w", encoding='utf-8') as f:
                        f.write(file.read().decode('utf-8'))
            elif url:
                if validators.url(url):
                    text_path = os.path.join(temp_dir, "url_text.txt")
                    try:
                        url_to_txt(url, text_path)
                    except ArticleException as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL.")
                        text_path = None  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

            # –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ check_article
            if text_path:
                with open(text_path, "r", encoding='utf-8') as f:
                    article_text = f.read()

                # –ó–∞–ø—Ä–æ—Å –∫ check_article
                check_result = check_article(check_promt, article_text=article_text)

                if check_result.startswith("OK"):
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ "OK"
                    st.info("‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞.")
                    progress = st.progress(0.25)

                    # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
                    if api_choice == "ChatGPT API":
                        dialog_text = create_dialog_gtp04mini(dialog_promt, dialog_input_path=text_path)
                        ssml_text = create_ssml_gpt04mini(ssml_promt, ssml_text=dialog_text)
                        st.success("‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                        st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥")
                        st.write(dialog_text)
                    else:
                        server_url = "https://2f3d-35-198-228-94.ngrok-free.app/"  # –£–∫–∞–∂–∏—Ç–µ URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ LLaMA
                        response = create_dialog_llama(server_url, article_text)
                        print(response)
                        dialog_text = "sorry, no dialogue"
                        ssml_text = response['dialogue']
                        st.success("‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

                    # –≠—Ç–∞–ø 3: –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                    audio_path = os.path.join(temp_dir, "output_audio.wav")
                    try:
                        st.text("üéôÔ∏è –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏")
                        progress.progress(0.75)
                        voice_synth(wav_output_path=audio_path, prompt_text=ssml_text)
                        st.text("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        progress.progress(1.0)

                        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ —Å–∞–π—Ç–µ
                        st.subheader("–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –¥–∏–∞–ª–æ–≥")
                        st.audio(audio_path, format="audio/wav")

                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
                        with open(audio_path, "rb") as f:
                            st.download_button(label="üì• –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ", data=f, file_name="dialog_audio.wav",
                                               mime="audio/wav")

                    except Exception as e:
                        # –ï—Å–ª–∏ —Å–∏–Ω—Ç–µ–∑ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        st.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
                        st.warning("–î–∏–∞–ª–æ–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω, –Ω–æ —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    source = file.name if file else url
                    save_to_history(source, dialog_text, audio_path if os.path.exists(audio_path) else None)

                else:
                    # –ï—Å–ª–∏ check_article –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "NO", –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    st.error(f"–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ –¥–∏–∞–ª–æ–≥–∞: {check_result}")

# –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
if history_button:
    c.execute("SELECT * FROM history ORDER BY timestamp DESC")
    rows = c.fetchall()
    for row in rows:
        st.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {row[1]}, –î–∞—Ç–∞: {row[4]}")
        st.write("–î–∏–∞–ª–æ–≥:")
        st.write(row[2])
        audio_path = row[3]
        if audio_path and os.path.exists(audio_path):
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            st.subheader("–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –¥–∏–∞–ª–æ–≥")
            st.audio(audio_path, format="audio/wav")
            with open(audio_path, "rb") as f:
                st.download_button(label="üì• –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ", data=f, file_name="dialog_audio.wav", mime="audio/wav")
        st.divider()
